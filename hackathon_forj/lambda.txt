# -*- coding: utf-8 -*-
import sys
import logging
import pymysql
import json
import subprocess
import os
import boto3

subprocess.call('pip install openai -t /tmp/ --no-cache-dir'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
sys.path.insert(1, '/tmp/')
import openai

import googleapiclient.discovery
from googleapiclient.discovery import build

'''
rds_host = :)
user_name = :)
password = :)
db_name = :)

logger = logging.getLogger()
logger.setLevel(logging.INFO)

try:
    conn = pymysql.connect(host=rds_host, user=user_name, passwd=password, db=db_name, connect_timeout=5,charset='utf8')
except pymysql.MySQLError as e:
    logger.error("연결 실패!")
    logger.error(e)
    sys.exit()
'''
logger.info("연결 성공!")


def lambda_handler(event, context):
    s3 = boto3.client('s3')

    bucketname = event['Records'][0]['s3']['bucket']['name']
    bucketobject = event['Records'][0]['s3']['object']['key']
    
    # Retrieve the file from S3
    response = s3.get_object(Bucket=bucketname, Key=bucketobject)

    # Read the file contents as text
    file_contents = response['Body'].read().decode('utf-8')
    print(file_contents)


    openai.api_key = os.getenv("API_KEY")

    #input: user inputs the topic.
    messages =[]
    messages.append({"role": "system", "content": f"from previous messages in {file_contents}, define single topic."})
    bot_thinks_topic = openai.chat.completions.create(model="gpt-3.5-turbo",messages = messages)
    bot_topic = bot_thinks_topic.choices[0].message.content.strip()
    messages.append({"role" : "assistant", "content" : f"{bot_topic}"})
    
    topic = bot_topic
    
    api_key_youtube = :)
    
    youtube = build('youtube','v3',developerKey=api_key_youtube)
    
    request2 = youtube.search().list(
      q = f"{topic}",
      part = "snippet",
      maxResults = 1,
      regionCode = "KR"
    )
    
    response = request2.execute()
    
    for item in response['items']:
        vid_id = item['id']['videoId']
        yt_link = f'https://youtu.be/{vid_id}'
    
    print("Bot: 추천 링크를 보내드릴게요!", yt_link)
   
    '''
    username = event['username']
    content = yt_link
    item_count = 0
    sql_string = f"insert into CONTENTS (username, content) values('{username}','{content}')"
    #query = "INSERT INTO CONTENTS (username, content) VALUES (%s, %s)"
    #data = f"('{username}','{content}')"
    with conn.cursor() as cur:
        #cur.execute("create table CONTENTS (username varchar(20) NOT NULL, content varchar(20) NOT NULL)")
        #cur.execute(query, data)
        cur.execute(sql_string)
        cur.execute("SELECT * FROM CONTENTS")
        result = cur.fetchall()
        for data in result:
            print(data)
        conn.commit()
    '''
    return "성공적으로 저장되었습니다"